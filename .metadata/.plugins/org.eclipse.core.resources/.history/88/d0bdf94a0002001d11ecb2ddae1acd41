package com.studentcrud.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.studentcrud.model.Student;
import com.studentcrud.service.StudentService;

@Repository
public class StudentDao implements StudentService {

	private static final String insertStudent = "INSERT INTO STUDENT_PORTAL_FIRST(id,name,email,password) values(?,?,?,?)";
	private static final String updateStudentById = "UPDATE STUDENT_PORTAL_FIRST SET name=? WHERE ID=?";
	private static final String getStudentById = "SELECT * FROM STUDENT_PORTAL_FIRST WHERE ID=?";
	private static final String deleteStudentById = "DELETE FROM STUDENT_PORTAL_FIRST WHERE ID=?";
	private static final String getAllStudents = "SELECT * FROM STUDENT_PORTAL_FIRST";
	private static final String getStudentPassword = "SELECT PASSWORD FROM STUDENT_PORTAL_FIRST WHERE ID=?";

	
	@Autowired
	JdbcTemplate jdbcTemplate;
	
	@Override
	public Student saveStudent(Student student) {
		jdbcTemplate.update(insertStudent , student.getId(), student.getName(), student.getEmail(),student.getPassword());
		return student;
	}

	@Override
	public Student updateStudent(Student student) {
		jdbcTemplate.update(updateStudentById, student.getId(),student.getName(),student.getEmail(),student.getPassword());
		return student;
	}

	@Override
	public Student getById(int id) {
		
		return jdbcTemplate.queryForObject(getStudentById ,(rs,rownum)->{
			return new Student(rs.getString("id"),rs.getString("name"), rs.getString("email"), rs.getString("password"));	
		},id);
	}

	@Override
	public String deleteById(int id) {
		jdbcTemplate.update(deleteStudentById, id);
		 return "Student got deleted with id " + id;
	}

	@Override
	public List<Student> allStudents() {
		
		 return jdbcTemplate.query(getAllStudents ,(rs,rownum)->{
			return new Student(rs.getString("id"),rs.getString("name"), rs.getString("email"), rs.getString("password"));	
		});
	}

	public String getPassword(String id) {

	    String password = (String) jdbcTemplate.queryForObject(getStudentPassword, String.class, new Object[] {id});
	    
	    if (password.isEmpty()) {
			return "invalid Password";
		} else {
			return password;
		}
	}
}















